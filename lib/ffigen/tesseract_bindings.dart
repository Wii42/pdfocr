// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:pdfocr/ffigen/leptonica_bindings.dart' as imp$1;

/// Bindings for libtesseract of the Tesseract OCR engine.
class TesseractBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TesseractBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TesseractBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// General free functions
  ffi.Pointer<ffi.Char> TessVersion() {
    return _TessVersion();
  }

  late final _TessVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'TessVersion');
  late final _TessVersion =
      _TessVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void TessDeleteText(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TessDeleteText(
      text,
    );
  }

  late final _TessDeleteTextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'TessDeleteText');
  late final _TessDeleteText =
      _TessDeleteTextPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void TessDeleteTextArray(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arr,
  ) {
    return _TessDeleteTextArray(
      arr,
    );
  }

  late final _TessDeleteTextArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('TessDeleteTextArray');
  late final _TessDeleteTextArray = _TessDeleteTextArrayPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void TessDeleteIntArray(
    ffi.Pointer<ffi.Int> arr,
  ) {
    return _TessDeleteIntArray(
      arr,
    );
  }

  late final _TessDeleteIntArrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'TessDeleteIntArray');
  late final _TessDeleteIntArray =
      _TessDeleteIntArrayPtr.asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  /// Renderer API
  ffi.Pointer<TessResultRenderer> TessTextRendererCreate(
    ffi.Pointer<ffi.Char> outputbase,
  ) {
    return _TessTextRendererCreate(
      outputbase,
    );
  }

  late final _TessTextRendererCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultRenderer> Function(
              ffi.Pointer<ffi.Char>)>>('TessTextRendererCreate');
  late final _TessTextRendererCreate = _TessTextRendererCreatePtr.asFunction<
      ffi.Pointer<TessResultRenderer> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<TessResultRenderer> TessHOcrRendererCreate(
    ffi.Pointer<ffi.Char> outputbase,
  ) {
    return _TessHOcrRendererCreate(
      outputbase,
    );
  }

  late final _TessHOcrRendererCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultRenderer> Function(
              ffi.Pointer<ffi.Char>)>>('TessHOcrRendererCreate');
  late final _TessHOcrRendererCreate = _TessHOcrRendererCreatePtr.asFunction<
      ffi.Pointer<TessResultRenderer> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<TessResultRenderer> TessHOcrRendererCreate2(
    ffi.Pointer<ffi.Char> outputbase,
    int font_info,
  ) {
    return _TessHOcrRendererCreate2(
      outputbase,
      font_info,
    );
  }

  late final _TessHOcrRendererCreate2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultRenderer> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('TessHOcrRendererCreate2');
  late final _TessHOcrRendererCreate2 = _TessHOcrRendererCreate2Ptr.asFunction<
      ffi.Pointer<TessResultRenderer> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<TessResultRenderer> TessAltoRendererCreate(
    ffi.Pointer<ffi.Char> outputbase,
  ) {
    return _TessAltoRendererCreate(
      outputbase,
    );
  }

  late final _TessAltoRendererCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultRenderer> Function(
              ffi.Pointer<ffi.Char>)>>('TessAltoRendererCreate');
  late final _TessAltoRendererCreate = _TessAltoRendererCreatePtr.asFunction<
      ffi.Pointer<TessResultRenderer> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<TessResultRenderer> TessPAGERendererCreate(
    ffi.Pointer<ffi.Char> outputbase,
  ) {
    return _TessPAGERendererCreate(
      outputbase,
    );
  }

  late final _TessPAGERendererCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultRenderer> Function(
              ffi.Pointer<ffi.Char>)>>('TessPAGERendererCreate');
  late final _TessPAGERendererCreate = _TessPAGERendererCreatePtr.asFunction<
      ffi.Pointer<TessResultRenderer> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<TessResultRenderer> TessTsvRendererCreate(
    ffi.Pointer<ffi.Char> outputbase,
  ) {
    return _TessTsvRendererCreate(
      outputbase,
    );
  }

  late final _TessTsvRendererCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultRenderer> Function(
              ffi.Pointer<ffi.Char>)>>('TessTsvRendererCreate');
  late final _TessTsvRendererCreate = _TessTsvRendererCreatePtr.asFunction<
      ffi.Pointer<TessResultRenderer> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<TessResultRenderer> TessPDFRendererCreate(
    ffi.Pointer<ffi.Char> outputbase,
    ffi.Pointer<ffi.Char> datadir,
    int textonly,
  ) {
    return _TessPDFRendererCreate(
      outputbase,
      datadir,
      textonly,
    );
  }

  late final _TessPDFRendererCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultRenderer> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('TessPDFRendererCreate');
  late final _TessPDFRendererCreate = _TessPDFRendererCreatePtr.asFunction<
      ffi.Pointer<TessResultRenderer> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<TessResultRenderer> TessUnlvRendererCreate(
    ffi.Pointer<ffi.Char> outputbase,
  ) {
    return _TessUnlvRendererCreate(
      outputbase,
    );
  }

  late final _TessUnlvRendererCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultRenderer> Function(
              ffi.Pointer<ffi.Char>)>>('TessUnlvRendererCreate');
  late final _TessUnlvRendererCreate = _TessUnlvRendererCreatePtr.asFunction<
      ffi.Pointer<TessResultRenderer> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<TessResultRenderer> TessBoxTextRendererCreate(
    ffi.Pointer<ffi.Char> outputbase,
  ) {
    return _TessBoxTextRendererCreate(
      outputbase,
    );
  }

  late final _TessBoxTextRendererCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultRenderer> Function(
              ffi.Pointer<ffi.Char>)>>('TessBoxTextRendererCreate');
  late final _TessBoxTextRendererCreate =
      _TessBoxTextRendererCreatePtr.asFunction<
          ffi.Pointer<TessResultRenderer> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<TessResultRenderer> TessLSTMBoxRendererCreate(
    ffi.Pointer<ffi.Char> outputbase,
  ) {
    return _TessLSTMBoxRendererCreate(
      outputbase,
    );
  }

  late final _TessLSTMBoxRendererCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultRenderer> Function(
              ffi.Pointer<ffi.Char>)>>('TessLSTMBoxRendererCreate');
  late final _TessLSTMBoxRendererCreate =
      _TessLSTMBoxRendererCreatePtr.asFunction<
          ffi.Pointer<TessResultRenderer> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<TessResultRenderer> TessWordStrBoxRendererCreate(
    ffi.Pointer<ffi.Char> outputbase,
  ) {
    return _TessWordStrBoxRendererCreate(
      outputbase,
    );
  }

  late final _TessWordStrBoxRendererCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultRenderer> Function(
              ffi.Pointer<ffi.Char>)>>('TessWordStrBoxRendererCreate');
  late final _TessWordStrBoxRendererCreate =
      _TessWordStrBoxRendererCreatePtr.asFunction<
          ffi.Pointer<TessResultRenderer> Function(ffi.Pointer<ffi.Char>)>();

  void TessDeleteResultRenderer(
    ffi.Pointer<TessResultRenderer> renderer,
  ) {
    return _TessDeleteResultRenderer(
      renderer,
    );
  }

  late final _TessDeleteResultRendererPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<TessResultRenderer>)>>(
      'TessDeleteResultRenderer');
  late final _TessDeleteResultRenderer = _TessDeleteResultRendererPtr
      .asFunction<void Function(ffi.Pointer<TessResultRenderer>)>();

  void TessResultRendererInsert(
    ffi.Pointer<TessResultRenderer> renderer,
    ffi.Pointer<TessResultRenderer> next,
  ) {
    return _TessResultRendererInsert(
      renderer,
      next,
    );
  }

  late final _TessResultRendererInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TessResultRenderer>,
              ffi.Pointer<TessResultRenderer>)>>('TessResultRendererInsert');
  late final _TessResultRendererInsert =
      _TessResultRendererInsertPtr.asFunction<
          void Function(ffi.Pointer<TessResultRenderer>,
              ffi.Pointer<TessResultRenderer>)>();

  ffi.Pointer<TessResultRenderer> TessResultRendererNext(
    ffi.Pointer<TessResultRenderer> renderer,
  ) {
    return _TessResultRendererNext(
      renderer,
    );
  }

  late final _TessResultRendererNextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultRenderer> Function(
              ffi.Pointer<TessResultRenderer>)>>('TessResultRendererNext');
  late final _TessResultRendererNext = _TessResultRendererNextPtr.asFunction<
      ffi.Pointer<TessResultRenderer> Function(
          ffi.Pointer<TessResultRenderer>)>();

  int TessResultRendererBeginDocument(
    ffi.Pointer<TessResultRenderer> renderer,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _TessResultRendererBeginDocument(
      renderer,
      title,
    );
  }

  late final _TessResultRendererBeginDocumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessResultRenderer>,
              ffi.Pointer<ffi.Char>)>>('TessResultRendererBeginDocument');
  late final _TessResultRendererBeginDocument =
      _TessResultRendererBeginDocumentPtr.asFunction<
          int Function(
              ffi.Pointer<TessResultRenderer>, ffi.Pointer<ffi.Char>)>();

  int TessResultRendererAddImage(
    ffi.Pointer<TessResultRenderer> renderer,
    ffi.Pointer<TessBaseAPI> api,
  ) {
    return _TessResultRendererAddImage(
      renderer,
      api,
    );
  }

  late final _TessResultRendererAddImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessResultRenderer>,
              ffi.Pointer<TessBaseAPI>)>>('TessResultRendererAddImage');
  late final _TessResultRendererAddImage =
      _TessResultRendererAddImagePtr.asFunction<
          int Function(
              ffi.Pointer<TessResultRenderer>, ffi.Pointer<TessBaseAPI>)>();

  int TessResultRendererEndDocument(
    ffi.Pointer<TessResultRenderer> renderer,
  ) {
    return _TessResultRendererEndDocument(
      renderer,
    );
  }

  late final _TessResultRendererEndDocumentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<TessResultRenderer>)>>(
      'TessResultRendererEndDocument');
  late final _TessResultRendererEndDocument = _TessResultRendererEndDocumentPtr
      .asFunction<int Function(ffi.Pointer<TessResultRenderer>)>();

  ffi.Pointer<ffi.Char> TessResultRendererExtention(
    ffi.Pointer<TessResultRenderer> renderer,
  ) {
    return _TessResultRendererExtention(
      renderer,
    );
  }

  late final _TessResultRendererExtentionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessResultRenderer>)>>('TessResultRendererExtention');
  late final _TessResultRendererExtention =
      _TessResultRendererExtentionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessResultRenderer>)>();

  ffi.Pointer<ffi.Char> TessResultRendererTitle(
    ffi.Pointer<TessResultRenderer> renderer,
  ) {
    return _TessResultRendererTitle(
      renderer,
    );
  }

  late final _TessResultRendererTitlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessResultRenderer>)>>('TessResultRendererTitle');
  late final _TessResultRendererTitle = _TessResultRendererTitlePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessResultRenderer>)>();

  int TessResultRendererImageNum(
    ffi.Pointer<TessResultRenderer> renderer,
  ) {
    return _TessResultRendererImageNum(
      renderer,
    );
  }

  late final _TessResultRendererImageNumPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<TessResultRenderer>)>>(
      'TessResultRendererImageNum');
  late final _TessResultRendererImageNum = _TessResultRendererImageNumPtr
      .asFunction<int Function(ffi.Pointer<TessResultRenderer>)>();

  /// Base API
  ffi.Pointer<TessBaseAPI> TessBaseAPICreate() {
    return _TessBaseAPICreate();
  }

  late final _TessBaseAPICreatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<TessBaseAPI> Function()>>(
          'TessBaseAPICreate');
  late final _TessBaseAPICreate =
      _TessBaseAPICreatePtr.asFunction<ffi.Pointer<TessBaseAPI> Function()>();

  void TessBaseAPIDelete(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIDelete(
      handle,
    );
  }

  late final _TessBaseAPIDeletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TessBaseAPI>)>>(
          'TessBaseAPIDelete');
  late final _TessBaseAPIDelete = _TessBaseAPIDeletePtr.asFunction<
      void Function(ffi.Pointer<TessBaseAPI>)>();

  void TessBaseAPISetInputName(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _TessBaseAPISetInputName(
      handle,
      name,
    );
  }

  late final _TessBaseAPISetInputNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Char>)>>('TessBaseAPISetInputName');
  late final _TessBaseAPISetInputName = _TessBaseAPISetInputNamePtr.asFunction<
      void Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetInputName(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetInputName(
      handle,
    );
  }

  late final _TessBaseAPIGetInputNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessBaseAPI>)>>('TessBaseAPIGetInputName');
  late final _TessBaseAPIGetInputName = _TessBaseAPIGetInputNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>)>();

  void TessBaseAPISetInputImage(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<imp$1.Pix> pix,
  ) {
    return _TessBaseAPISetInputImage(
      handle,
      pix,
    );
  }

  late final _TessBaseAPISetInputImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<imp$1.Pix>)>>('TessBaseAPISetInputImage');
  late final _TessBaseAPISetInputImage =
      _TessBaseAPISetInputImagePtr.asFunction<
          void Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<imp$1.Pix>)>();

  ffi.Pointer<imp$1.Pix> TessBaseAPIGetInputImage(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetInputImage(
      handle,
    );
  }

  late final _TessBaseAPIGetInputImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<imp$1.Pix> Function(
              ffi.Pointer<TessBaseAPI>)>>('TessBaseAPIGetInputImage');
  late final _TessBaseAPIGetInputImage = _TessBaseAPIGetInputImagePtr
      .asFunction<ffi.Pointer<imp$1.Pix> Function(ffi.Pointer<TessBaseAPI>)>();

  int TessBaseAPIGetSourceYResolution(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetSourceYResolution(
      handle,
    );
  }

  late final _TessBaseAPIGetSourceYResolutionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<TessBaseAPI>)>>(
          'TessBaseAPIGetSourceYResolution');
  late final _TessBaseAPIGetSourceYResolution =
      _TessBaseAPIGetSourceYResolutionPtr.asFunction<
          int Function(ffi.Pointer<TessBaseAPI>)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetDatapath(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetDatapath(
      handle,
    );
  }

  late final _TessBaseAPIGetDatapathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessBaseAPI>)>>('TessBaseAPIGetDatapath');
  late final _TessBaseAPIGetDatapath = _TessBaseAPIGetDatapathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>)>();

  void TessBaseAPISetOutputName(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _TessBaseAPISetOutputName(
      handle,
      name,
    );
  }

  late final _TessBaseAPISetOutputNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Char>)>>('TessBaseAPISetOutputName');
  late final _TessBaseAPISetOutputName =
      _TessBaseAPISetOutputNamePtr.asFunction<
          void Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>)>();

  int TessBaseAPISetVariable(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _TessBaseAPISetVariable(
      handle,
      name,
      value,
    );
  }

  late final _TessBaseAPISetVariablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('TessBaseAPISetVariable');
  late final _TessBaseAPISetVariable = _TessBaseAPISetVariablePtr.asFunction<
      int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int TessBaseAPISetDebugVariable(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _TessBaseAPISetDebugVariable(
      handle,
      name,
      value,
    );
  }

  late final _TessBaseAPISetDebugVariablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('TessBaseAPISetDebugVariable');
  late final _TessBaseAPISetDebugVariable =
      _TessBaseAPISetDebugVariablePtr.asFunction<
          int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int TessBaseAPIGetIntVariable(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Int> value,
  ) {
    return _TessBaseAPIGetIntVariable(
      handle,
      name,
      value,
    );
  }

  late final _TessBaseAPIGetIntVariablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('TessBaseAPIGetIntVariable');
  late final _TessBaseAPIGetIntVariable =
      _TessBaseAPIGetIntVariablePtr.asFunction<
          int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int TessBaseAPIGetBoolVariable(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Int> value,
  ) {
    return _TessBaseAPIGetBoolVariable(
      handle,
      name,
      value,
    );
  }

  late final _TessBaseAPIGetBoolVariablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('TessBaseAPIGetBoolVariable');
  late final _TessBaseAPIGetBoolVariable =
      _TessBaseAPIGetBoolVariablePtr.asFunction<
          int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int TessBaseAPIGetDoubleVariable(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Double> value,
  ) {
    return _TessBaseAPIGetDoubleVariable(
      handle,
      name,
      value,
    );
  }

  late final _TessBaseAPIGetDoubleVariablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>>('TessBaseAPIGetDoubleVariable');
  late final _TessBaseAPIGetDoubleVariable =
      _TessBaseAPIGetDoubleVariablePtr.asFunction<
          int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetStringVariable(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _TessBaseAPIGetStringVariable(
      handle,
      name,
    );
  }

  late final _TessBaseAPIGetStringVariablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Char>)>>('TessBaseAPIGetStringVariable');
  late final _TessBaseAPIGetStringVariable =
      _TessBaseAPIGetStringVariablePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>)>();

  void TessBaseAPIPrintVariables(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<FILE> fp,
  ) {
    return _TessBaseAPIPrintVariables(
      handle,
      fp,
    );
  }

  late final _TessBaseAPIPrintVariablesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<FILE>)>>('TessBaseAPIPrintVariables');
  late final _TessBaseAPIPrintVariables = _TessBaseAPIPrintVariablesPtr
      .asFunction<void Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<FILE>)>();

  int TessBaseAPIPrintVariablesToFile(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _TessBaseAPIPrintVariablesToFile(
      handle,
      filename,
    );
  }

  late final _TessBaseAPIPrintVariablesToFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Char>)>>('TessBaseAPIPrintVariablesToFile');
  late final _TessBaseAPIPrintVariablesToFile =
      _TessBaseAPIPrintVariablesToFilePtr.asFunction<
          int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>)>();

  int TessBaseAPIInit1(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> datapath,
    ffi.Pointer<ffi.Char> language,
    TessOcrEngineMode oem,
    ffi.Pointer<ffi.Pointer<ffi.Char>> configs,
    int configs_size,
  ) {
    return _TessBaseAPIInit1(
      handle,
      datapath,
      language,
      oem.value,
      configs,
      configs_size,
    );
  }

  late final _TessBaseAPIInit1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('TessBaseAPIInit1');
  late final _TessBaseAPIInit1 = _TessBaseAPIInit1Ptr.asFunction<
      int Function(
          ffi.Pointer<TessBaseAPI>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int)>();

  int TessBaseAPIInit2(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> datapath,
    ffi.Pointer<ffi.Char> language,
    TessOcrEngineMode oem,
  ) {
    return _TessBaseAPIInit2(
      handle,
      datapath,
      language,
      oem.value,
    );
  }

  late final _TessBaseAPIInit2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('TessBaseAPIInit2');
  late final _TessBaseAPIInit2 = _TessBaseAPIInit2Ptr.asFunction<
      int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  int TessBaseAPIInit3(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> datapath,
    ffi.Pointer<ffi.Char> language,
  ) {
    return _TessBaseAPIInit3(
      handle,
      datapath,
      language,
    );
  }

  late final _TessBaseAPIInit3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('TessBaseAPIInit3');
  late final _TessBaseAPIInit3 = _TessBaseAPIInit3Ptr.asFunction<
      int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int TessBaseAPIInit4(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> datapath,
    ffi.Pointer<ffi.Char> language,
    TessOcrEngineMode mode,
    ffi.Pointer<ffi.Pointer<ffi.Char>> configs,
    int configs_size,
    ffi.Pointer<ffi.Pointer<ffi.Char>> vars_vec,
    ffi.Pointer<ffi.Pointer<ffi.Char>> vars_values,
    int vars_vec_size,
    int set_only_non_debug_params,
  ) {
    return _TessBaseAPIInit4(
      handle,
      datapath,
      language,
      mode.value,
      configs,
      configs_size,
      vars_vec,
      vars_values,
      vars_vec_size,
      set_only_non_debug_params,
    );
  }

  late final _TessBaseAPIInit4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size,
              ffi.Int)>>('TessBaseAPIInit4');
  late final _TessBaseAPIInit4 = _TessBaseAPIInit4Ptr.asFunction<
      int Function(
          ffi.Pointer<TessBaseAPI>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          int)>();

  int TessBaseAPIInit5(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> data,
    int data_size,
    ffi.Pointer<ffi.Char> language,
    TessOcrEngineMode mode,
    ffi.Pointer<ffi.Pointer<ffi.Char>> configs,
    int configs_size,
    ffi.Pointer<ffi.Pointer<ffi.Char>> vars_vec,
    ffi.Pointer<ffi.Pointer<ffi.Char>> vars_values,
    int vars_vec_size,
    int set_only_non_debug_params,
  ) {
    return _TessBaseAPIInit5(
      handle,
      data,
      data_size,
      language,
      mode.value,
      configs,
      configs_size,
      vars_vec,
      vars_values,
      vars_vec_size,
      set_only_non_debug_params,
    );
  }

  late final _TessBaseAPIInit5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size,
              ffi.Int)>>('TessBaseAPIInit5');
  late final _TessBaseAPIInit5 = _TessBaseAPIInit5Ptr.asFunction<
      int Function(
          ffi.Pointer<TessBaseAPI>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          int)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetInitLanguagesAsString(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetInitLanguagesAsString(
      handle,
    );
  }

  late final _TessBaseAPIGetInitLanguagesAsStringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>)>>(
      'TessBaseAPIGetInitLanguagesAsString');
  late final _TessBaseAPIGetInitLanguagesAsString =
      _TessBaseAPIGetInitLanguagesAsStringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> TessBaseAPIGetLoadedLanguagesAsVector(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetLoadedLanguagesAsVector(
      handle,
    );
  }

  late final _TessBaseAPIGetLoadedLanguagesAsVectorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<TessBaseAPI>)>>(
      'TessBaseAPIGetLoadedLanguagesAsVector');
  late final _TessBaseAPIGetLoadedLanguagesAsVector =
      _TessBaseAPIGetLoadedLanguagesAsVectorPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<TessBaseAPI>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> TessBaseAPIGetAvailableLanguagesAsVector(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetAvailableLanguagesAsVector(
      handle,
    );
  }

  late final _TessBaseAPIGetAvailableLanguagesAsVectorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<TessBaseAPI>)>>(
      'TessBaseAPIGetAvailableLanguagesAsVector');
  late final _TessBaseAPIGetAvailableLanguagesAsVector =
      _TessBaseAPIGetAvailableLanguagesAsVectorPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<TessBaseAPI>)>();

  void TessBaseAPIInitForAnalysePage(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIInitForAnalysePage(
      handle,
    );
  }

  late final _TessBaseAPIInitForAnalysePagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TessBaseAPI>)>>(
          'TessBaseAPIInitForAnalysePage');
  late final _TessBaseAPIInitForAnalysePage = _TessBaseAPIInitForAnalysePagePtr
      .asFunction<void Function(ffi.Pointer<TessBaseAPI>)>();

  void TessBaseAPIReadConfigFile(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _TessBaseAPIReadConfigFile(
      handle,
      filename,
    );
  }

  late final _TessBaseAPIReadConfigFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Char>)>>('TessBaseAPIReadConfigFile');
  late final _TessBaseAPIReadConfigFile =
      _TessBaseAPIReadConfigFilePtr.asFunction<
          void Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>)>();

  void TessBaseAPIReadDebugConfigFile(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _TessBaseAPIReadDebugConfigFile(
      handle,
      filename,
    );
  }

  late final _TessBaseAPIReadDebugConfigFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Char>)>>('TessBaseAPIReadDebugConfigFile');
  late final _TessBaseAPIReadDebugConfigFile =
      _TessBaseAPIReadDebugConfigFilePtr.asFunction<
          void Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>)>();

  void TessBaseAPISetPageSegMode(
    ffi.Pointer<TessBaseAPI> handle,
    TessPageSegMode mode,
  ) {
    return _TessBaseAPISetPageSegMode(
      handle,
      mode.value,
    );
  }

  late final _TessBaseAPISetPageSegModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TessBaseAPI>,
              ffi.UnsignedInt)>>('TessBaseAPISetPageSegMode');
  late final _TessBaseAPISetPageSegMode = _TessBaseAPISetPageSegModePtr
      .asFunction<void Function(ffi.Pointer<TessBaseAPI>, int)>();

  TessPageSegMode TessBaseAPIGetPageSegMode(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return TessPageSegMode.fromValue(_TessBaseAPIGetPageSegMode(
      handle,
    ));
  }

  late final _TessBaseAPIGetPageSegModePtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<TessBaseAPI>)>>(
      'TessBaseAPIGetPageSegMode');
  late final _TessBaseAPIGetPageSegMode = _TessBaseAPIGetPageSegModePtr
      .asFunction<int Function(ffi.Pointer<TessBaseAPI>)>();

  ffi.Pointer<ffi.Char> TessBaseAPIRect(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.UnsignedChar> imagedata,
    int bytes_per_pixel,
    int bytes_per_line,
    int left,
    int top,
    int width,
    int height,
  ) {
    return _TessBaseAPIRect(
      handle,
      imagedata,
      bytes_per_pixel,
      bytes_per_line,
      left,
      top,
      width,
      height,
    );
  }

  late final _TessBaseAPIRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('TessBaseAPIRect');
  late final _TessBaseAPIRect = _TessBaseAPIRectPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int, int)>();

  void TessBaseAPIClearAdaptiveClassifier(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIClearAdaptiveClassifier(
      handle,
    );
  }

  late final _TessBaseAPIClearAdaptiveClassifierPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TessBaseAPI>)>>(
          'TessBaseAPIClearAdaptiveClassifier');
  late final _TessBaseAPIClearAdaptiveClassifier =
      _TessBaseAPIClearAdaptiveClassifierPtr.asFunction<
          void Function(ffi.Pointer<TessBaseAPI>)>();

  void TessBaseAPISetImage(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.UnsignedChar> imagedata,
    int width,
    int height,
    int bytes_per_pixel,
    int bytes_per_line,
  ) {
    return _TessBaseAPISetImage(
      handle,
      imagedata,
      width,
      height,
      bytes_per_pixel,
      bytes_per_line,
    );
  }

  late final _TessBaseAPISetImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('TessBaseAPISetImage');
  late final _TessBaseAPISetImage = _TessBaseAPISetImagePtr.asFunction<
      void Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.UnsignedChar>,
          int, int, int, int)>();

  void TessBaseAPISetImage2(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<imp$1.Pix> pix,
  ) {
    return _TessBaseAPISetImage2(
      handle,
      pix,
    );
  }

  late final _TessBaseAPISetImage2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<imp$1.Pix>)>>('TessBaseAPISetImage2');
  late final _TessBaseAPISetImage2 = _TessBaseAPISetImage2Ptr.asFunction<
      void Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<imp$1.Pix>)>();

  void TessBaseAPISetSourceResolution(
    ffi.Pointer<TessBaseAPI> handle,
    int ppi,
  ) {
    return _TessBaseAPISetSourceResolution(
      handle,
      ppi,
    );
  }

  late final _TessBaseAPISetSourceResolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TessBaseAPI>,
              ffi.Int)>>('TessBaseAPISetSourceResolution');
  late final _TessBaseAPISetSourceResolution =
      _TessBaseAPISetSourceResolutionPtr.asFunction<
          void Function(ffi.Pointer<TessBaseAPI>, int)>();

  void TessBaseAPISetRectangle(
    ffi.Pointer<TessBaseAPI> handle,
    int left,
    int top,
    int width,
    int height,
  ) {
    return _TessBaseAPISetRectangle(
      handle,
      left,
      top,
      width,
      height,
    );
  }

  late final _TessBaseAPISetRectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TessBaseAPI>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('TessBaseAPISetRectangle');
  late final _TessBaseAPISetRectangle = _TessBaseAPISetRectanglePtr.asFunction<
      void Function(ffi.Pointer<TessBaseAPI>, int, int, int, int)>();

  ffi.Pointer<imp$1.Pix> TessBaseAPIGetThresholdedImage(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetThresholdedImage(
      handle,
    );
  }

  late final _TessBaseAPIGetThresholdedImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<imp$1.Pix> Function(
              ffi.Pointer<TessBaseAPI>)>>('TessBaseAPIGetThresholdedImage');
  late final _TessBaseAPIGetThresholdedImage =
      _TessBaseAPIGetThresholdedImagePtr.asFunction<
          ffi.Pointer<imp$1.Pix> Function(ffi.Pointer<TessBaseAPI>)>();

  double TessBaseAPIGetGradient(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetGradient(
      handle,
    );
  }

  late final _TessBaseAPIGetGradientPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<TessBaseAPI>)>>(
          'TessBaseAPIGetGradient');
  late final _TessBaseAPIGetGradient = _TessBaseAPIGetGradientPtr.asFunction<
      double Function(ffi.Pointer<TessBaseAPI>)>();

  ffi.Pointer<Boxa> TessBaseAPIGetRegions(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Pointer<Pixa>> pixa,
  ) {
    return _TessBaseAPIGetRegions(
      handle,
      pixa,
    );
  }

  late final _TessBaseAPIGetRegionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Boxa> Function(ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Pointer<Pixa>>)>>('TessBaseAPIGetRegions');
  late final _TessBaseAPIGetRegions = _TessBaseAPIGetRegionsPtr.asFunction<
      ffi.Pointer<Boxa> Function(
          ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Pointer<Pixa>>)>();

  ffi.Pointer<Boxa> TessBaseAPIGetTextlines(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Pointer<Pixa>> pixa,
    ffi.Pointer<ffi.Pointer<ffi.Int>> blockids,
  ) {
    return _TessBaseAPIGetTextlines(
      handle,
      pixa,
      blockids,
    );
  }

  late final _TessBaseAPIGetTextlinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Boxa> Function(
              ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Pointer<Pixa>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>)>>('TessBaseAPIGetTextlines');
  late final _TessBaseAPIGetTextlines = _TessBaseAPIGetTextlinesPtr.asFunction<
      ffi.Pointer<Boxa> Function(ffi.Pointer<TessBaseAPI>,
          ffi.Pointer<ffi.Pointer<Pixa>>, ffi.Pointer<ffi.Pointer<ffi.Int>>)>();

  ffi.Pointer<Boxa> TessBaseAPIGetTextlines1(
    ffi.Pointer<TessBaseAPI> handle,
    int raw_image,
    int raw_padding,
    ffi.Pointer<ffi.Pointer<Pixa>> pixa,
    ffi.Pointer<ffi.Pointer<ffi.Int>> blockids,
    ffi.Pointer<ffi.Pointer<ffi.Int>> paraids,
  ) {
    return _TessBaseAPIGetTextlines1(
      handle,
      raw_image,
      raw_padding,
      pixa,
      blockids,
      paraids,
    );
  }

  late final _TessBaseAPIGetTextlines1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Boxa> Function(
              ffi.Pointer<TessBaseAPI>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<Pixa>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>)>>('TessBaseAPIGetTextlines1');
  late final _TessBaseAPIGetTextlines1 =
      _TessBaseAPIGetTextlines1Ptr.asFunction<
          ffi.Pointer<Boxa> Function(
              ffi.Pointer<TessBaseAPI>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<Pixa>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>)>();

  ffi.Pointer<Boxa> TessBaseAPIGetStrips(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Pointer<Pixa>> pixa,
    ffi.Pointer<ffi.Pointer<ffi.Int>> blockids,
  ) {
    return _TessBaseAPIGetStrips(
      handle,
      pixa,
      blockids,
    );
  }

  late final _TessBaseAPIGetStripsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Boxa> Function(
              ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Pointer<Pixa>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>)>>('TessBaseAPIGetStrips');
  late final _TessBaseAPIGetStrips = _TessBaseAPIGetStripsPtr.asFunction<
      ffi.Pointer<Boxa> Function(ffi.Pointer<TessBaseAPI>,
          ffi.Pointer<ffi.Pointer<Pixa>>, ffi.Pointer<ffi.Pointer<ffi.Int>>)>();

  ffi.Pointer<Boxa> TessBaseAPIGetWords(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Pointer<Pixa>> pixa,
  ) {
    return _TessBaseAPIGetWords(
      handle,
      pixa,
    );
  }

  late final _TessBaseAPIGetWordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Boxa> Function(ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Pointer<Pixa>>)>>('TessBaseAPIGetWords');
  late final _TessBaseAPIGetWords = _TessBaseAPIGetWordsPtr.asFunction<
      ffi.Pointer<Boxa> Function(
          ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Pointer<Pixa>>)>();

  ffi.Pointer<Boxa> TessBaseAPIGetConnectedComponents(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Pointer<Pixa>> cc,
  ) {
    return _TessBaseAPIGetConnectedComponents(
      handle,
      cc,
    );
  }

  late final _TessBaseAPIGetConnectedComponentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<Boxa> Function(
                  ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Pointer<Pixa>>)>>(
      'TessBaseAPIGetConnectedComponents');
  late final _TessBaseAPIGetConnectedComponents =
      _TessBaseAPIGetConnectedComponentsPtr.asFunction<
          ffi.Pointer<Boxa> Function(
              ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Pointer<Pixa>>)>();

  ffi.Pointer<Boxa> TessBaseAPIGetComponentImages(
    ffi.Pointer<TessBaseAPI> handle,
    TessPageIteratorLevel level,
    int text_only,
    ffi.Pointer<ffi.Pointer<Pixa>> pixa,
    ffi.Pointer<ffi.Pointer<ffi.Int>> blockids,
  ) {
    return _TessBaseAPIGetComponentImages(
      handle,
      level.value,
      text_only,
      pixa,
      blockids,
    );
  }

  late final _TessBaseAPIGetComponentImagesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<Boxa> Function(
                  ffi.Pointer<TessBaseAPI>,
                  ffi.UnsignedInt,
                  ffi.Int,
                  ffi.Pointer<ffi.Pointer<Pixa>>,
                  ffi.Pointer<ffi.Pointer<ffi.Int>>)>>(
      'TessBaseAPIGetComponentImages');
  late final _TessBaseAPIGetComponentImages =
      _TessBaseAPIGetComponentImagesPtr.asFunction<
          ffi.Pointer<Boxa> Function(
              ffi.Pointer<TessBaseAPI>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<Pixa>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>)>();

  ffi.Pointer<Boxa> TessBaseAPIGetComponentImages1(
    ffi.Pointer<TessBaseAPI> handle,
    TessPageIteratorLevel level,
    int text_only,
    int raw_image,
    int raw_padding,
    ffi.Pointer<ffi.Pointer<Pixa>> pixa,
    ffi.Pointer<ffi.Pointer<ffi.Int>> blockids,
    ffi.Pointer<ffi.Pointer<ffi.Int>> paraids,
  ) {
    return _TessBaseAPIGetComponentImages1(
      handle,
      level.value,
      text_only,
      raw_image,
      raw_padding,
      pixa,
      blockids,
      paraids,
    );
  }

  late final _TessBaseAPIGetComponentImages1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<Boxa> Function(
                  ffi.Pointer<TessBaseAPI>,
                  ffi.UnsignedInt,
                  ffi.Int,
                  ffi.Int,
                  ffi.Int,
                  ffi.Pointer<ffi.Pointer<Pixa>>,
                  ffi.Pointer<ffi.Pointer<ffi.Int>>,
                  ffi.Pointer<ffi.Pointer<ffi.Int>>)>>(
      'TessBaseAPIGetComponentImages1');
  late final _TessBaseAPIGetComponentImages1 =
      _TessBaseAPIGetComponentImages1Ptr.asFunction<
          ffi.Pointer<Boxa> Function(
              ffi.Pointer<TessBaseAPI>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Pointer<Pixa>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>)>();

  int TessBaseAPIGetThresholdedImageScaleFactor(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetThresholdedImageScaleFactor(
      handle,
    );
  }

  late final _TessBaseAPIGetThresholdedImageScaleFactorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<TessBaseAPI>)>>(
          'TessBaseAPIGetThresholdedImageScaleFactor');
  late final _TessBaseAPIGetThresholdedImageScaleFactor =
      _TessBaseAPIGetThresholdedImageScaleFactorPtr.asFunction<
          int Function(ffi.Pointer<TessBaseAPI>)>();

  ffi.Pointer<TessPageIterator> TessBaseAPIAnalyseLayout(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIAnalyseLayout(
      handle,
    );
  }

  late final _TessBaseAPIAnalyseLayoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessPageIterator> Function(
              ffi.Pointer<TessBaseAPI>)>>('TessBaseAPIAnalyseLayout');
  late final _TessBaseAPIAnalyseLayout =
      _TessBaseAPIAnalyseLayoutPtr.asFunction<
          ffi.Pointer<TessPageIterator> Function(ffi.Pointer<TessBaseAPI>)>();

  int TessBaseAPIRecognize(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ETEXT_DESC> monitor,
  ) {
    return _TessBaseAPIRecognize(
      handle,
      monitor,
    );
  }

  late final _TessBaseAPIRecognizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ETEXT_DESC>)>>('TessBaseAPIRecognize');
  late final _TessBaseAPIRecognize = _TessBaseAPIRecognizePtr.asFunction<
      int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ETEXT_DESC>)>();

  int TessBaseAPIProcessPages(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> retry_config,
    int timeout_millisec,
    ffi.Pointer<TessResultRenderer> renderer,
  ) {
    return _TessBaseAPIProcessPages(
      handle,
      filename,
      retry_config,
      timeout_millisec,
      renderer,
    );
  }

  late final _TessBaseAPIProcessPagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<TessResultRenderer>)>>('TessBaseAPIProcessPages');
  late final _TessBaseAPIProcessPages = _TessBaseAPIProcessPagesPtr.asFunction<
      int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<TessResultRenderer>)>();

  int TessBaseAPIProcessPage(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<imp$1.Pix> pix,
    int page_index,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> retry_config,
    int timeout_millisec,
    ffi.Pointer<TessResultRenderer> renderer,
  ) {
    return _TessBaseAPIProcessPage(
      handle,
      pix,
      page_index,
      filename,
      retry_config,
      timeout_millisec,
      renderer,
    );
  }

  late final _TessBaseAPIProcessPagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<imp$1.Pix>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<TessResultRenderer>)>>('TessBaseAPIProcessPage');
  late final _TessBaseAPIProcessPage = _TessBaseAPIProcessPagePtr.asFunction<
      int Function(
          ffi.Pointer<TessBaseAPI>,
          ffi.Pointer<imp$1.Pix>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<TessResultRenderer>)>();

  ffi.Pointer<TessResultIterator> TessBaseAPIGetIterator(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetIterator(
      handle,
    );
  }

  late final _TessBaseAPIGetIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultIterator> Function(
              ffi.Pointer<TessBaseAPI>)>>('TessBaseAPIGetIterator');
  late final _TessBaseAPIGetIterator = _TessBaseAPIGetIteratorPtr.asFunction<
      ffi.Pointer<TessResultIterator> Function(ffi.Pointer<TessBaseAPI>)>();

  ffi.Pointer<TessMutableIterator> TessBaseAPIGetMutableIterator(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetMutableIterator(
      handle,
    );
  }

  late final _TessBaseAPIGetMutableIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessMutableIterator> Function(
              ffi.Pointer<TessBaseAPI>)>>('TessBaseAPIGetMutableIterator');
  late final _TessBaseAPIGetMutableIterator =
      _TessBaseAPIGetMutableIteratorPtr.asFunction<
          ffi.Pointer<TessMutableIterator> Function(
              ffi.Pointer<TessBaseAPI>)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetUTF8Text(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetUTF8Text(
      handle,
    );
  }

  late final _TessBaseAPIGetUTF8TextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessBaseAPI>)>>('TessBaseAPIGetUTF8Text');
  late final _TessBaseAPIGetUTF8Text = _TessBaseAPIGetUTF8TextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetHOCRText(
    ffi.Pointer<TessBaseAPI> handle,
    int page_number,
  ) {
    return _TessBaseAPIGetHOCRText(
      handle,
      page_number,
    );
  }

  late final _TessBaseAPIGetHOCRTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessBaseAPI>, ffi.Int)>>('TessBaseAPIGetHOCRText');
  late final _TessBaseAPIGetHOCRText = _TessBaseAPIGetHOCRTextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>, int)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetAltoText(
    ffi.Pointer<TessBaseAPI> handle,
    int page_number,
  ) {
    return _TessBaseAPIGetAltoText(
      handle,
      page_number,
    );
  }

  late final _TessBaseAPIGetAltoTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessBaseAPI>, ffi.Int)>>('TessBaseAPIGetAltoText');
  late final _TessBaseAPIGetAltoText = _TessBaseAPIGetAltoTextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>, int)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetPAGEText(
    ffi.Pointer<TessBaseAPI> handle,
    int page_number,
  ) {
    return _TessBaseAPIGetPAGEText(
      handle,
      page_number,
    );
  }

  late final _TessBaseAPIGetPAGETextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessBaseAPI>, ffi.Int)>>('TessBaseAPIGetPAGEText');
  late final _TessBaseAPIGetPAGEText = _TessBaseAPIGetPAGETextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>, int)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetTsvText(
    ffi.Pointer<TessBaseAPI> handle,
    int page_number,
  ) {
    return _TessBaseAPIGetTsvText(
      handle,
      page_number,
    );
  }

  late final _TessBaseAPIGetTsvTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessBaseAPI>, ffi.Int)>>('TessBaseAPIGetTsvText');
  late final _TessBaseAPIGetTsvText = _TessBaseAPIGetTsvTextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>, int)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetBoxText(
    ffi.Pointer<TessBaseAPI> handle,
    int page_number,
  ) {
    return _TessBaseAPIGetBoxText(
      handle,
      page_number,
    );
  }

  late final _TessBaseAPIGetBoxTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessBaseAPI>, ffi.Int)>>('TessBaseAPIGetBoxText');
  late final _TessBaseAPIGetBoxText = _TessBaseAPIGetBoxTextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>, int)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetLSTMBoxText(
    ffi.Pointer<TessBaseAPI> handle,
    int page_number,
  ) {
    return _TessBaseAPIGetLSTMBoxText(
      handle,
      page_number,
    );
  }

  late final _TessBaseAPIGetLSTMBoxTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessBaseAPI>, ffi.Int)>>('TessBaseAPIGetLSTMBoxText');
  late final _TessBaseAPIGetLSTMBoxText =
      _TessBaseAPIGetLSTMBoxTextPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>, int)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetWordStrBoxText(
    ffi.Pointer<TessBaseAPI> handle,
    int page_number,
  ) {
    return _TessBaseAPIGetWordStrBoxText(
      handle,
      page_number,
    );
  }

  late final _TessBaseAPIGetWordStrBoxTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>,
              ffi.Int)>>('TessBaseAPIGetWordStrBoxText');
  late final _TessBaseAPIGetWordStrBoxText =
      _TessBaseAPIGetWordStrBoxTextPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>, int)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetUNLVText(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIGetUNLVText(
      handle,
    );
  }

  late final _TessBaseAPIGetUNLVTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessBaseAPI>)>>('TessBaseAPIGetUNLVText');
  late final _TessBaseAPIGetUNLVText = _TessBaseAPIGetUNLVTextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>)>();

  int TessBaseAPIMeanTextConf(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIMeanTextConf(
      handle,
    );
  }

  late final _TessBaseAPIMeanTextConfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<TessBaseAPI>)>>(
          'TessBaseAPIMeanTextConf');
  late final _TessBaseAPIMeanTextConf = _TessBaseAPIMeanTextConfPtr.asFunction<
      int Function(ffi.Pointer<TessBaseAPI>)>();

  ffi.Pointer<ffi.Int> TessBaseAPIAllWordConfidences(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIAllWordConfidences(
      handle,
    );
  }

  late final _TessBaseAPIAllWordConfidencesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<TessBaseAPI>)>>('TessBaseAPIAllWordConfidences');
  late final _TessBaseAPIAllWordConfidences = _TessBaseAPIAllWordConfidencesPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<TessBaseAPI>)>();

  int TessBaseAPIAdaptToWordStr(
    ffi.Pointer<TessBaseAPI> handle,
    TessPageSegMode mode,
    ffi.Pointer<ffi.Char> wordstr,
  ) {
    return _TessBaseAPIAdaptToWordStr(
      handle,
      mode.value,
      wordstr,
    );
  }

  late final _TessBaseAPIAdaptToWordStrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessBaseAPI>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('TessBaseAPIAdaptToWordStr');
  late final _TessBaseAPIAdaptToWordStr =
      _TessBaseAPIAdaptToWordStrPtr.asFunction<
          int Function(ffi.Pointer<TessBaseAPI>, int, ffi.Pointer<ffi.Char>)>();

  void TessBaseAPIClear(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIClear(
      handle,
    );
  }

  late final _TessBaseAPIClearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TessBaseAPI>)>>(
          'TessBaseAPIClear');
  late final _TessBaseAPIClear = _TessBaseAPIClearPtr.asFunction<
      void Function(ffi.Pointer<TessBaseAPI>)>();

  void TessBaseAPIEnd(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIEnd(
      handle,
    );
  }

  late final _TessBaseAPIEndPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TessBaseAPI>)>>(
          'TessBaseAPIEnd');
  late final _TessBaseAPIEnd =
      _TessBaseAPIEndPtr.asFunction<void Function(ffi.Pointer<TessBaseAPI>)>();

  int TessBaseAPIIsValidWord(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Char> word,
  ) {
    return _TessBaseAPIIsValidWord(
      handle,
      word,
    );
  }

  late final _TessBaseAPIIsValidWordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Char>)>>('TessBaseAPIIsValidWord');
  late final _TessBaseAPIIsValidWord = _TessBaseAPIIsValidWordPtr.asFunction<
      int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Char>)>();

  int TessBaseAPIGetTextDirection(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Int> out_offset,
    ffi.Pointer<ffi.Float> out_slope,
  ) {
    return _TessBaseAPIGetTextDirection(
      handle,
      out_offset,
      out_slope,
    );
  }

  late final _TessBaseAPIGetTextDirectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Float>)>>('TessBaseAPIGetTextDirection');
  late final _TessBaseAPIGetTextDirection =
      _TessBaseAPIGetTextDirectionPtr.asFunction<
          int Function(ffi.Pointer<TessBaseAPI>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<ffi.Char> TessBaseAPIGetUnichar(
    ffi.Pointer<TessBaseAPI> handle,
    int unichar_id,
  ) {
    return _TessBaseAPIGetUnichar(
      handle,
      unichar_id,
    );
  }

  late final _TessBaseAPIGetUnicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessBaseAPI>, ffi.Int)>>('TessBaseAPIGetUnichar');
  late final _TessBaseAPIGetUnichar = _TessBaseAPIGetUnicharPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessBaseAPI>, int)>();

  void TessBaseAPIClearPersistentCache(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPIClearPersistentCache(
      handle,
    );
  }

  late final _TessBaseAPIClearPersistentCachePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TessBaseAPI>)>>(
          'TessBaseAPIClearPersistentCache');
  late final _TessBaseAPIClearPersistentCache =
      _TessBaseAPIClearPersistentCachePtr.asFunction<
          void Function(ffi.Pointer<TessBaseAPI>)>();

  /// Call TessDeleteText(*best_script_name) to free memory allocated by this
  /// function
  int TessBaseAPIDetectOrientationScript(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Int> orient_deg,
    ffi.Pointer<ffi.Float> orient_conf,
    ffi.Pointer<ffi.Pointer<ffi.Char>> script_name,
    ffi.Pointer<ffi.Float> script_conf,
  ) {
    return _TessBaseAPIDetectOrientationScript(
      handle,
      orient_deg,
      orient_conf,
      script_name,
      script_conf,
    );
  }

  late final _TessBaseAPIDetectOrientationScriptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Float>)>>('TessBaseAPIDetectOrientationScript');
  late final _TessBaseAPIDetectOrientationScript =
      _TessBaseAPIDetectOrientationScriptPtr.asFunction<
          int Function(
              ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Float>)>();

  void TessBaseAPISetMinOrientationMargin(
    ffi.Pointer<TessBaseAPI> handle,
    double margin,
  ) {
    return _TessBaseAPISetMinOrientationMargin(
      handle,
      margin,
    );
  }

  late final _TessBaseAPISetMinOrientationMarginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TessBaseAPI>,
              ffi.Double)>>('TessBaseAPISetMinOrientationMargin');
  late final _TessBaseAPISetMinOrientationMargin =
      _TessBaseAPISetMinOrientationMarginPtr.asFunction<
          void Function(ffi.Pointer<TessBaseAPI>, double)>();

  int TessBaseAPINumDawgs(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return _TessBaseAPINumDawgs(
      handle,
    );
  }

  late final _TessBaseAPINumDawgsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<TessBaseAPI>)>>(
          'TessBaseAPINumDawgs');
  late final _TessBaseAPINumDawgs = _TessBaseAPINumDawgsPtr.asFunction<
      int Function(ffi.Pointer<TessBaseAPI>)>();

  TessOcrEngineMode TessBaseAPIOem(
    ffi.Pointer<TessBaseAPI> handle,
  ) {
    return TessOcrEngineMode.fromValue(_TessBaseAPIOem(
      handle,
    ));
  }

  late final _TessBaseAPIOemPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<TessBaseAPI>)>>(
      'TessBaseAPIOem');
  late final _TessBaseAPIOem =
      _TessBaseAPIOemPtr.asFunction<int Function(ffi.Pointer<TessBaseAPI>)>();

  void TessBaseGetBlockTextOrientations(
    ffi.Pointer<TessBaseAPI> handle,
    ffi.Pointer<ffi.Pointer<ffi.Int>> block_orientation,
    ffi.Pointer<ffi.Pointer<ffi.Bool>> vertical_writing,
  ) {
    return _TessBaseGetBlockTextOrientations(
      handle,
      block_orientation,
      vertical_writing,
    );
  }

  late final _TessBaseGetBlockTextOrientationsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<TessBaseAPI>,
                  ffi.Pointer<ffi.Pointer<ffi.Int>>,
                  ffi.Pointer<ffi.Pointer<ffi.Bool>>)>>(
      'TessBaseGetBlockTextOrientations');
  late final _TessBaseGetBlockTextOrientations =
      _TessBaseGetBlockTextOrientationsPtr.asFunction<
          void Function(
              ffi.Pointer<TessBaseAPI>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Pointer<ffi.Bool>>)>();

  /// Page iterator
  void TessPageIteratorDelete(
    ffi.Pointer<TessPageIterator> handle,
  ) {
    return _TessPageIteratorDelete(
      handle,
    );
  }

  late final _TessPageIteratorDeletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TessPageIterator>)>>(
      'TessPageIteratorDelete');
  late final _TessPageIteratorDelete = _TessPageIteratorDeletePtr.asFunction<
      void Function(ffi.Pointer<TessPageIterator>)>();

  ffi.Pointer<TessPageIterator> TessPageIteratorCopy(
    ffi.Pointer<TessPageIterator> handle,
  ) {
    return _TessPageIteratorCopy(
      handle,
    );
  }

  late final _TessPageIteratorCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessPageIterator> Function(
              ffi.Pointer<TessPageIterator>)>>('TessPageIteratorCopy');
  late final _TessPageIteratorCopy = _TessPageIteratorCopyPtr.asFunction<
      ffi.Pointer<TessPageIterator> Function(ffi.Pointer<TessPageIterator>)>();

  void TessPageIteratorBegin(
    ffi.Pointer<TessPageIterator> handle,
  ) {
    return _TessPageIteratorBegin(
      handle,
    );
  }

  late final _TessPageIteratorBeginPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TessPageIterator>)>>(
      'TessPageIteratorBegin');
  late final _TessPageIteratorBegin = _TessPageIteratorBeginPtr.asFunction<
      void Function(ffi.Pointer<TessPageIterator>)>();

  int TessPageIteratorNext(
    ffi.Pointer<TessPageIterator> handle,
    TessPageIteratorLevel level,
  ) {
    return _TessPageIteratorNext(
      handle,
      level.value,
    );
  }

  late final _TessPageIteratorNextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessPageIterator>,
              ffi.UnsignedInt)>>('TessPageIteratorNext');
  late final _TessPageIteratorNext = _TessPageIteratorNextPtr.asFunction<
      int Function(ffi.Pointer<TessPageIterator>, int)>();

  int TessPageIteratorIsAtBeginningOf(
    ffi.Pointer<TessPageIterator> handle,
    TessPageIteratorLevel level,
  ) {
    return _TessPageIteratorIsAtBeginningOf(
      handle,
      level.value,
    );
  }

  late final _TessPageIteratorIsAtBeginningOfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessPageIterator>,
              ffi.UnsignedInt)>>('TessPageIteratorIsAtBeginningOf');
  late final _TessPageIteratorIsAtBeginningOf =
      _TessPageIteratorIsAtBeginningOfPtr.asFunction<
          int Function(ffi.Pointer<TessPageIterator>, int)>();

  int TessPageIteratorIsAtFinalElement(
    ffi.Pointer<TessPageIterator> handle,
    TessPageIteratorLevel level,
    TessPageIteratorLevel element,
  ) {
    return _TessPageIteratorIsAtFinalElement(
      handle,
      level.value,
      element.value,
    );
  }

  late final _TessPageIteratorIsAtFinalElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessPageIterator>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('TessPageIteratorIsAtFinalElement');
  late final _TessPageIteratorIsAtFinalElement =
      _TessPageIteratorIsAtFinalElementPtr.asFunction<
          int Function(ffi.Pointer<TessPageIterator>, int, int)>();

  int TessPageIteratorBoundingBox(
    ffi.Pointer<TessPageIterator> handle,
    TessPageIteratorLevel level,
    ffi.Pointer<ffi.Int> left,
    ffi.Pointer<ffi.Int> top,
    ffi.Pointer<ffi.Int> right,
    ffi.Pointer<ffi.Int> bottom,
  ) {
    return _TessPageIteratorBoundingBox(
      handle,
      level.value,
      left,
      top,
      right,
      bottom,
    );
  }

  late final _TessPageIteratorBoundingBoxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<TessPageIterator>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TessPageIteratorBoundingBox');
  late final _TessPageIteratorBoundingBox =
      _TessPageIteratorBoundingBoxPtr.asFunction<
          int Function(
              ffi.Pointer<TessPageIterator>,
              int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  TessPolyBlockType TessPageIteratorBlockType(
    ffi.Pointer<TessPageIterator> handle,
  ) {
    return TessPolyBlockType.fromValue(_TessPageIteratorBlockType(
      handle,
    ));
  }

  late final _TessPageIteratorBlockTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<TessPageIterator>)>>('TessPageIteratorBlockType');
  late final _TessPageIteratorBlockType = _TessPageIteratorBlockTypePtr
      .asFunction<int Function(ffi.Pointer<TessPageIterator>)>();

  ffi.Pointer<imp$1.Pix> TessPageIteratorGetBinaryImage(
    ffi.Pointer<TessPageIterator> handle,
    TessPageIteratorLevel level,
  ) {
    return _TessPageIteratorGetBinaryImage(
      handle,
      level.value,
    );
  }

  late final _TessPageIteratorGetBinaryImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<imp$1.Pix> Function(ffi.Pointer<TessPageIterator>,
              ffi.UnsignedInt)>>('TessPageIteratorGetBinaryImage');
  late final _TessPageIteratorGetBinaryImage =
      _TessPageIteratorGetBinaryImagePtr.asFunction<
          ffi.Pointer<imp$1.Pix> Function(
              ffi.Pointer<TessPageIterator>, int)>();

  ffi.Pointer<imp$1.Pix> TessPageIteratorGetImage(
    ffi.Pointer<TessPageIterator> handle,
    TessPageIteratorLevel level,
    int padding,
    ffi.Pointer<imp$1.Pix> original_image,
    ffi.Pointer<ffi.Int> left,
    ffi.Pointer<ffi.Int> top,
  ) {
    return _TessPageIteratorGetImage(
      handle,
      level.value,
      padding,
      original_image,
      left,
      top,
    );
  }

  late final _TessPageIteratorGetImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<imp$1.Pix> Function(
              ffi.Pointer<TessPageIterator>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<imp$1.Pix>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TessPageIteratorGetImage');
  late final _TessPageIteratorGetImage =
      _TessPageIteratorGetImagePtr.asFunction<
          ffi.Pointer<imp$1.Pix> Function(
              ffi.Pointer<TessPageIterator>,
              int,
              int,
              ffi.Pointer<imp$1.Pix>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int TessPageIteratorBaseline(
    ffi.Pointer<TessPageIterator> handle,
    TessPageIteratorLevel level,
    ffi.Pointer<ffi.Int> x1,
    ffi.Pointer<ffi.Int> y1,
    ffi.Pointer<ffi.Int> x2,
    ffi.Pointer<ffi.Int> y2,
  ) {
    return _TessPageIteratorBaseline(
      handle,
      level.value,
      x1,
      y1,
      x2,
      y2,
    );
  }

  late final _TessPageIteratorBaselinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<TessPageIterator>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TessPageIteratorBaseline');
  late final _TessPageIteratorBaseline =
      _TessPageIteratorBaselinePtr.asFunction<
          int Function(
              ffi.Pointer<TessPageIterator>,
              int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  void TessPageIteratorOrientation(
    ffi.Pointer<TessPageIterator> handle,
    ffi.Pointer<ffi.UnsignedInt> orientation,
    ffi.Pointer<ffi.UnsignedInt> writing_direction,
    ffi.Pointer<ffi.UnsignedInt> textline_order,
    ffi.Pointer<ffi.Float> deskew_angle,
  ) {
    return _TessPageIteratorOrientation(
      handle,
      orientation,
      writing_direction,
      textline_order,
      deskew_angle,
    );
  }

  late final _TessPageIteratorOrientationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TessPageIterator>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Float>)>>('TessPageIteratorOrientation');
  late final _TessPageIteratorOrientation =
      _TessPageIteratorOrientationPtr.asFunction<
          void Function(
              ffi.Pointer<TessPageIterator>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Float>)>();

  void TessPageIteratorParagraphInfo(
    ffi.Pointer<TessPageIterator> handle,
    ffi.Pointer<ffi.UnsignedInt> justification,
    ffi.Pointer<ffi.Int> is_list_item,
    ffi.Pointer<ffi.Int> is_crown,
    ffi.Pointer<ffi.Int> first_line_indent,
  ) {
    return _TessPageIteratorParagraphInfo(
      handle,
      justification,
      is_list_item,
      is_crown,
      first_line_indent,
    );
  }

  late final _TessPageIteratorParagraphInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TessPageIterator>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TessPageIteratorParagraphInfo');
  late final _TessPageIteratorParagraphInfo =
      _TessPageIteratorParagraphInfoPtr.asFunction<
          void Function(
              ffi.Pointer<TessPageIterator>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  /// Result iterator
  void TessResultIteratorDelete(
    ffi.Pointer<TessResultIterator> handle,
  ) {
    return _TessResultIteratorDelete(
      handle,
    );
  }

  late final _TessResultIteratorDeletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<TessResultIterator>)>>(
      'TessResultIteratorDelete');
  late final _TessResultIteratorDelete = _TessResultIteratorDeletePtr
      .asFunction<void Function(ffi.Pointer<TessResultIterator>)>();

  ffi.Pointer<TessResultIterator> TessResultIteratorCopy(
    ffi.Pointer<TessResultIterator> handle,
  ) {
    return _TessResultIteratorCopy(
      handle,
    );
  }

  late final _TessResultIteratorCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TessResultIterator> Function(
              ffi.Pointer<TessResultIterator>)>>('TessResultIteratorCopy');
  late final _TessResultIteratorCopy = _TessResultIteratorCopyPtr.asFunction<
      ffi.Pointer<TessResultIterator> Function(
          ffi.Pointer<TessResultIterator>)>();

  ffi.Pointer<TessPageIterator> TessResultIteratorGetPageIterator(
    ffi.Pointer<TessResultIterator> handle,
  ) {
    return _TessResultIteratorGetPageIterator(
      handle,
    );
  }

  late final _TessResultIteratorGetPageIteratorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<TessPageIterator> Function(
                  ffi.Pointer<TessResultIterator>)>>(
      'TessResultIteratorGetPageIterator');
  late final _TessResultIteratorGetPageIterator =
      _TessResultIteratorGetPageIteratorPtr.asFunction<
          ffi.Pointer<TessPageIterator> Function(
              ffi.Pointer<TessResultIterator>)>();

  ffi.Pointer<TessPageIterator> TessResultIteratorGetPageIteratorConst(
    ffi.Pointer<TessResultIterator> handle,
  ) {
    return _TessResultIteratorGetPageIteratorConst(
      handle,
    );
  }

  late final _TessResultIteratorGetPageIteratorConstPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<TessPageIterator> Function(
                  ffi.Pointer<TessResultIterator>)>>(
      'TessResultIteratorGetPageIteratorConst');
  late final _TessResultIteratorGetPageIteratorConst =
      _TessResultIteratorGetPageIteratorConstPtr.asFunction<
          ffi.Pointer<TessPageIterator> Function(
              ffi.Pointer<TessResultIterator>)>();

  ffi.Pointer<TessChoiceIterator> TessResultIteratorGetChoiceIterator(
    ffi.Pointer<TessResultIterator> handle,
  ) {
    return _TessResultIteratorGetChoiceIterator(
      handle,
    );
  }

  late final _TessResultIteratorGetChoiceIteratorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<TessChoiceIterator> Function(
                  ffi.Pointer<TessResultIterator>)>>(
      'TessResultIteratorGetChoiceIterator');
  late final _TessResultIteratorGetChoiceIterator =
      _TessResultIteratorGetChoiceIteratorPtr.asFunction<
          ffi.Pointer<TessChoiceIterator> Function(
              ffi.Pointer<TessResultIterator>)>();

  int TessResultIteratorNext(
    ffi.Pointer<TessResultIterator> handle,
    TessPageIteratorLevel level,
  ) {
    return _TessResultIteratorNext(
      handle,
      level.value,
    );
  }

  late final _TessResultIteratorNextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TessResultIterator>,
              ffi.UnsignedInt)>>('TessResultIteratorNext');
  late final _TessResultIteratorNext = _TessResultIteratorNextPtr.asFunction<
      int Function(ffi.Pointer<TessResultIterator>, int)>();

  ffi.Pointer<ffi.Char> TessResultIteratorGetUTF8Text(
    ffi.Pointer<TessResultIterator> handle,
    TessPageIteratorLevel level,
  ) {
    return _TessResultIteratorGetUTF8Text(
      handle,
      level.value,
    );
  }

  late final _TessResultIteratorGetUTF8TextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessResultIterator>,
              ffi.UnsignedInt)>>('TessResultIteratorGetUTF8Text');
  late final _TessResultIteratorGetUTF8Text =
      _TessResultIteratorGetUTF8TextPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessResultIterator>, int)>();

  double TessResultIteratorConfidence(
    ffi.Pointer<TessResultIterator> handle,
    TessPageIteratorLevel level,
  ) {
    return _TessResultIteratorConfidence(
      handle,
      level.value,
    );
  }

  late final _TessResultIteratorConfidencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<TessResultIterator>,
              ffi.UnsignedInt)>>('TessResultIteratorConfidence');
  late final _TessResultIteratorConfidence = _TessResultIteratorConfidencePtr
      .asFunction<double Function(ffi.Pointer<TessResultIterator>, int)>();

  ffi.Pointer<ffi.Char> TessResultIteratorWordRecognitionLanguage(
    ffi.Pointer<TessResultIterator> handle,
  ) {
    return _TessResultIteratorWordRecognitionLanguage(
      handle,
    );
  }

  late final _TessResultIteratorWordRecognitionLanguagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessResultIterator>)>>(
      'TessResultIteratorWordRecognitionLanguage');
  late final _TessResultIteratorWordRecognitionLanguage =
      _TessResultIteratorWordRecognitionLanguagePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessResultIterator>)>();

  ffi.Pointer<ffi.Char> TessResultIteratorWordFontAttributes(
    ffi.Pointer<TessResultIterator> handle,
    ffi.Pointer<ffi.Int> is_bold,
    ffi.Pointer<ffi.Int> is_italic,
    ffi.Pointer<ffi.Int> is_underlined,
    ffi.Pointer<ffi.Int> is_monospace,
    ffi.Pointer<ffi.Int> is_serif,
    ffi.Pointer<ffi.Int> is_smallcaps,
    ffi.Pointer<ffi.Int> pointsize,
    ffi.Pointer<ffi.Int> font_id,
  ) {
    return _TessResultIteratorWordFontAttributes(
      handle,
      is_bold,
      is_italic,
      is_underlined,
      is_monospace,
      is_serif,
      is_smallcaps,
      pointsize,
      font_id,
    );
  }

  late final _TessResultIteratorWordFontAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessResultIterator>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TessResultIteratorWordFontAttributes');
  late final _TessResultIteratorWordFontAttributes =
      _TessResultIteratorWordFontAttributesPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TessResultIterator>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int TessResultIteratorWordIsFromDictionary(
    ffi.Pointer<TessResultIterator> handle,
  ) {
    return _TessResultIteratorWordIsFromDictionary(
      handle,
    );
  }

  late final _TessResultIteratorWordIsFromDictionaryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<TessResultIterator>)>>(
      'TessResultIteratorWordIsFromDictionary');
  late final _TessResultIteratorWordIsFromDictionary =
      _TessResultIteratorWordIsFromDictionaryPtr.asFunction<
          int Function(ffi.Pointer<TessResultIterator>)>();

  int TessResultIteratorWordIsNumeric(
    ffi.Pointer<TessResultIterator> handle,
  ) {
    return _TessResultIteratorWordIsNumeric(
      handle,
    );
  }

  late final _TessResultIteratorWordIsNumericPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<TessResultIterator>)>>(
      'TessResultIteratorWordIsNumeric');
  late final _TessResultIteratorWordIsNumeric =
      _TessResultIteratorWordIsNumericPtr.asFunction<
          int Function(ffi.Pointer<TessResultIterator>)>();

  int TessResultIteratorSymbolIsSuperscript(
    ffi.Pointer<TessResultIterator> handle,
  ) {
    return _TessResultIteratorSymbolIsSuperscript(
      handle,
    );
  }

  late final _TessResultIteratorSymbolIsSuperscriptPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<TessResultIterator>)>>(
      'TessResultIteratorSymbolIsSuperscript');
  late final _TessResultIteratorSymbolIsSuperscript =
      _TessResultIteratorSymbolIsSuperscriptPtr.asFunction<
          int Function(ffi.Pointer<TessResultIterator>)>();

  int TessResultIteratorSymbolIsSubscript(
    ffi.Pointer<TessResultIterator> handle,
  ) {
    return _TessResultIteratorSymbolIsSubscript(
      handle,
    );
  }

  late final _TessResultIteratorSymbolIsSubscriptPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<TessResultIterator>)>>(
      'TessResultIteratorSymbolIsSubscript');
  late final _TessResultIteratorSymbolIsSubscript =
      _TessResultIteratorSymbolIsSubscriptPtr.asFunction<
          int Function(ffi.Pointer<TessResultIterator>)>();

  int TessResultIteratorSymbolIsDropcap(
    ffi.Pointer<TessResultIterator> handle,
  ) {
    return _TessResultIteratorSymbolIsDropcap(
      handle,
    );
  }

  late final _TessResultIteratorSymbolIsDropcapPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<TessResultIterator>)>>(
      'TessResultIteratorSymbolIsDropcap');
  late final _TessResultIteratorSymbolIsDropcap =
      _TessResultIteratorSymbolIsDropcapPtr.asFunction<
          int Function(ffi.Pointer<TessResultIterator>)>();

  void TessChoiceIteratorDelete(
    ffi.Pointer<TessChoiceIterator> handle,
  ) {
    return _TessChoiceIteratorDelete(
      handle,
    );
  }

  late final _TessChoiceIteratorDeletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<TessChoiceIterator>)>>(
      'TessChoiceIteratorDelete');
  late final _TessChoiceIteratorDelete = _TessChoiceIteratorDeletePtr
      .asFunction<void Function(ffi.Pointer<TessChoiceIterator>)>();

  int TessChoiceIteratorNext(
    ffi.Pointer<TessChoiceIterator> handle,
  ) {
    return _TessChoiceIteratorNext(
      handle,
    );
  }

  late final _TessChoiceIteratorNextPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<TessChoiceIterator>)>>(
      'TessChoiceIteratorNext');
  late final _TessChoiceIteratorNext = _TessChoiceIteratorNextPtr.asFunction<
      int Function(ffi.Pointer<TessChoiceIterator>)>();

  ffi.Pointer<ffi.Char> TessChoiceIteratorGetUTF8Text(
    ffi.Pointer<TessChoiceIterator> handle,
  ) {
    return _TessChoiceIteratorGetUTF8Text(
      handle,
    );
  }

  late final _TessChoiceIteratorGetUTF8TextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessChoiceIterator>)>>(
      'TessChoiceIteratorGetUTF8Text');
  late final _TessChoiceIteratorGetUTF8Text =
      _TessChoiceIteratorGetUTF8TextPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TessChoiceIterator>)>();

  double TessChoiceIteratorConfidence(
    ffi.Pointer<TessChoiceIterator> handle,
  ) {
    return _TessChoiceIteratorConfidence(
      handle,
    );
  }

  late final _TessChoiceIteratorConfidencePtr = _lookup<
          ffi
          .NativeFunction<ffi.Float Function(ffi.Pointer<TessChoiceIterator>)>>(
      'TessChoiceIteratorConfidence');
  late final _TessChoiceIteratorConfidence = _TessChoiceIteratorConfidencePtr
      .asFunction<double Function(ffi.Pointer<TessChoiceIterator>)>();

  /// Progress monitor
  ffi.Pointer<ETEXT_DESC> TessMonitorCreate() {
    return _TessMonitorCreate();
  }

  late final _TessMonitorCreatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ETEXT_DESC> Function()>>(
          'TessMonitorCreate');
  late final _TessMonitorCreate =
      _TessMonitorCreatePtr.asFunction<ffi.Pointer<ETEXT_DESC> Function()>();

  void TessMonitorDelete(
    ffi.Pointer<ETEXT_DESC> monitor,
  ) {
    return _TessMonitorDelete(
      monitor,
    );
  }

  late final _TessMonitorDeletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ETEXT_DESC>)>>(
          'TessMonitorDelete');
  late final _TessMonitorDelete = _TessMonitorDeletePtr.asFunction<
      void Function(ffi.Pointer<ETEXT_DESC>)>();

  void TessMonitorSetCancelFunc(
    ffi.Pointer<ETEXT_DESC> monitor,
    TessCancelFunc cancelFunc,
  ) {
    return _TessMonitorSetCancelFunc(
      monitor,
      cancelFunc,
    );
  }

  late final _TessMonitorSetCancelFuncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ETEXT_DESC>,
              TessCancelFunc)>>('TessMonitorSetCancelFunc');
  late final _TessMonitorSetCancelFunc = _TessMonitorSetCancelFuncPtr
      .asFunction<void Function(ffi.Pointer<ETEXT_DESC>, TessCancelFunc)>();

  void TessMonitorSetCancelThis(
    ffi.Pointer<ETEXT_DESC> monitor,
    ffi.Pointer<ffi.Void> cancelThis,
  ) {
    return _TessMonitorSetCancelThis(
      monitor,
      cancelThis,
    );
  }

  late final _TessMonitorSetCancelThisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ETEXT_DESC>,
              ffi.Pointer<ffi.Void>)>>('TessMonitorSetCancelThis');
  late final _TessMonitorSetCancelThis =
      _TessMonitorSetCancelThisPtr.asFunction<
          void Function(ffi.Pointer<ETEXT_DESC>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> TessMonitorGetCancelThis(
    ffi.Pointer<ETEXT_DESC> monitor,
  ) {
    return _TessMonitorGetCancelThis(
      monitor,
    );
  }

  late final _TessMonitorGetCancelThisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ETEXT_DESC>)>>('TessMonitorGetCancelThis');
  late final _TessMonitorGetCancelThis = _TessMonitorGetCancelThisPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ETEXT_DESC>)>();

  void TessMonitorSetProgressFunc(
    ffi.Pointer<ETEXT_DESC> monitor,
    TessProgressFunc progressFunc,
  ) {
    return _TessMonitorSetProgressFunc(
      monitor,
      progressFunc,
    );
  }

  late final _TessMonitorSetProgressFuncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ETEXT_DESC>,
              TessProgressFunc)>>('TessMonitorSetProgressFunc');
  late final _TessMonitorSetProgressFunc = _TessMonitorSetProgressFuncPtr
      .asFunction<void Function(ffi.Pointer<ETEXT_DESC>, TessProgressFunc)>();

  int TessMonitorGetProgress(
    ffi.Pointer<ETEXT_DESC> monitor,
  ) {
    return _TessMonitorGetProgress(
      monitor,
    );
  }

  late final _TessMonitorGetProgressPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ETEXT_DESC>)>>(
          'TessMonitorGetProgress');
  late final _TessMonitorGetProgress = _TessMonitorGetProgressPtr.asFunction<
      int Function(ffi.Pointer<ETEXT_DESC>)>();

  void TessMonitorSetDeadlineMSecs(
    ffi.Pointer<ETEXT_DESC> monitor,
    int deadline,
  ) {
    return _TessMonitorSetDeadlineMSecs(
      monitor,
      deadline,
    );
  }

  late final _TessMonitorSetDeadlineMSecsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ETEXT_DESC>, ffi.Int)>>(
      'TessMonitorSetDeadlineMSecs');
  late final _TessMonitorSetDeadlineMSecs = _TessMonitorSetDeadlineMSecsPtr
      .asFunction<void Function(ffi.Pointer<ETEXT_DESC>, int)>();
}

final class TessResultRenderer extends ffi.Opaque {}

final class TessBaseAPI extends ffi.Opaque {}

final class TessPageIterator extends ffi.Opaque {}

final class TessResultIterator extends ffi.Opaque {}

final class TessMutableIterator extends ffi.Opaque {}

final class TessChoiceIterator extends ffi.Opaque {}

enum TessOcrEngineMode {
  OEM_TESSERACT_ONLY(0),
  OEM_LSTM_ONLY(1),
  OEM_TESSERACT_LSTM_COMBINED(2),
  OEM_DEFAULT(3);

  final int value;
  const TessOcrEngineMode(this.value);

  static TessOcrEngineMode fromValue(int value) => switch (value) {
        0 => OEM_TESSERACT_ONLY,
        1 => OEM_LSTM_ONLY,
        2 => OEM_TESSERACT_LSTM_COMBINED,
        3 => OEM_DEFAULT,
        _ => throw ArgumentError('Unknown value for TessOcrEngineMode: $value'),
      };
}

enum TessPageSegMode {
  PSM_OSD_ONLY(0),
  PSM_AUTO_OSD(1),
  PSM_AUTO_ONLY(2),
  PSM_AUTO(3),
  PSM_SINGLE_COLUMN(4),
  PSM_SINGLE_BLOCK_VERT_TEXT(5),
  PSM_SINGLE_BLOCK(6),
  PSM_SINGLE_LINE(7),
  PSM_SINGLE_WORD(8),
  PSM_CIRCLE_WORD(9),
  PSM_SINGLE_CHAR(10),
  PSM_SPARSE_TEXT(11),
  PSM_SPARSE_TEXT_OSD(12),
  PSM_RAW_LINE(13),
  PSM_COUNT(14);

  final int value;
  const TessPageSegMode(this.value);

  static TessPageSegMode fromValue(int value) => switch (value) {
        0 => PSM_OSD_ONLY,
        1 => PSM_AUTO_OSD,
        2 => PSM_AUTO_ONLY,
        3 => PSM_AUTO,
        4 => PSM_SINGLE_COLUMN,
        5 => PSM_SINGLE_BLOCK_VERT_TEXT,
        6 => PSM_SINGLE_BLOCK,
        7 => PSM_SINGLE_LINE,
        8 => PSM_SINGLE_WORD,
        9 => PSM_CIRCLE_WORD,
        10 => PSM_SINGLE_CHAR,
        11 => PSM_SPARSE_TEXT,
        12 => PSM_SPARSE_TEXT_OSD,
        13 => PSM_RAW_LINE,
        14 => PSM_COUNT,
        _ => throw ArgumentError('Unknown value for TessPageSegMode: $value'),
      };
}

enum TessPageIteratorLevel {
  RIL_BLOCK(0),
  RIL_PARA(1),
  RIL_TEXTLINE(2),
  RIL_WORD(3),
  RIL_SYMBOL(4);

  final int value;
  const TessPageIteratorLevel(this.value);

  static TessPageIteratorLevel fromValue(int value) => switch (value) {
        0 => RIL_BLOCK,
        1 => RIL_PARA,
        2 => RIL_TEXTLINE,
        3 => RIL_WORD,
        4 => RIL_SYMBOL,
        _ => throw ArgumentError(
            'Unknown value for TessPageIteratorLevel: $value'),
      };
}

enum TessPolyBlockType {
  PT_UNKNOWN(0),
  PT_FLOWING_TEXT(1),
  PT_HEADING_TEXT(2),
  PT_PULLOUT_TEXT(3),
  PT_EQUATION(4),
  PT_INLINE_EQUATION(5),
  PT_TABLE(6),
  PT_VERTICAL_TEXT(7),
  PT_CAPTION_TEXT(8),
  PT_FLOWING_IMAGE(9),
  PT_HEADING_IMAGE(10),
  PT_PULLOUT_IMAGE(11),
  PT_HORZ_LINE(12),
  PT_VERT_LINE(13),
  PT_NOISE(14),
  PT_COUNT(15);

  final int value;
  const TessPolyBlockType(this.value);

  static TessPolyBlockType fromValue(int value) => switch (value) {
        0 => PT_UNKNOWN,
        1 => PT_FLOWING_TEXT,
        2 => PT_HEADING_TEXT,
        3 => PT_PULLOUT_TEXT,
        4 => PT_EQUATION,
        5 => PT_INLINE_EQUATION,
        6 => PT_TABLE,
        7 => PT_VERTICAL_TEXT,
        8 => PT_CAPTION_TEXT,
        9 => PT_FLOWING_IMAGE,
        10 => PT_HEADING_IMAGE,
        11 => PT_PULLOUT_IMAGE,
        12 => PT_HORZ_LINE,
        13 => PT_VERT_LINE,
        14 => PT_NOISE,
        15 => PT_COUNT,
        _ => throw ArgumentError('Unknown value for TessPolyBlockType: $value'),
      };
}

enum TessOrientation {
  ORIENTATION_PAGE_UP(0),
  ORIENTATION_PAGE_RIGHT(1),
  ORIENTATION_PAGE_DOWN(2),
  ORIENTATION_PAGE_LEFT(3);

  final int value;
  const TessOrientation(this.value);

  static TessOrientation fromValue(int value) => switch (value) {
        0 => ORIENTATION_PAGE_UP,
        1 => ORIENTATION_PAGE_RIGHT,
        2 => ORIENTATION_PAGE_DOWN,
        3 => ORIENTATION_PAGE_LEFT,
        _ => throw ArgumentError('Unknown value for TessOrientation: $value'),
      };
}

enum TessParagraphJustification {
  JUSTIFICATION_UNKNOWN(0),
  JUSTIFICATION_LEFT(1),
  JUSTIFICATION_CENTER(2),
  JUSTIFICATION_RIGHT(3);

  final int value;
  const TessParagraphJustification(this.value);

  static TessParagraphJustification fromValue(int value) => switch (value) {
        0 => JUSTIFICATION_UNKNOWN,
        1 => JUSTIFICATION_LEFT,
        2 => JUSTIFICATION_CENTER,
        3 => JUSTIFICATION_RIGHT,
        _ => throw ArgumentError(
            'Unknown value for TessParagraphJustification: $value'),
      };
}

enum TessWritingDirection {
  WRITING_DIRECTION_LEFT_TO_RIGHT(0),
  WRITING_DIRECTION_RIGHT_TO_LEFT(1),
  WRITING_DIRECTION_TOP_TO_BOTTOM(2);

  final int value;
  const TessWritingDirection(this.value);

  static TessWritingDirection fromValue(int value) => switch (value) {
        0 => WRITING_DIRECTION_LEFT_TO_RIGHT,
        1 => WRITING_DIRECTION_RIGHT_TO_LEFT,
        2 => WRITING_DIRECTION_TOP_TO_BOTTOM,
        _ =>
          throw ArgumentError('Unknown value for TessWritingDirection: $value'),
      };
}

enum TessTextlineOrder {
  TEXTLINE_ORDER_LEFT_TO_RIGHT(0),
  TEXTLINE_ORDER_RIGHT_TO_LEFT(1),
  TEXTLINE_ORDER_TOP_TO_BOTTOM(2);

  final int value;
  const TessTextlineOrder(this.value);

  static TessTextlineOrder fromValue(int value) => switch (value) {
        0 => TEXTLINE_ORDER_LEFT_TO_RIGHT,
        1 => TEXTLINE_ORDER_RIGHT_TO_LEFT,
        2 => TEXTLINE_ORDER_TOP_TO_BOTTOM,
        _ => throw ArgumentError('Unknown value for TessTextlineOrder: $value'),
      };
}

final class ETEXT_DESC extends ffi.Opaque {}

typedef TessCancelFuncFunction = ffi.Bool Function(
    ffi.Pointer<ffi.Void> cancel_this, ffi.Int words);
typedef DartTessCancelFuncFunction = bool Function(
    ffi.Pointer<ffi.Void> cancel_this, int words);
typedef TessCancelFunc
    = ffi.Pointer<ffi.NativeFunction<TessCancelFuncFunction>>;
typedef TessProgressFuncFunction = ffi.Bool Function(
    ffi.Pointer<ETEXT_DESC> ths,
    ffi.Int left,
    ffi.Int right,
    ffi.Int top,
    ffi.Int bottom);
typedef DartTessProgressFuncFunction = bool Function(
    ffi.Pointer<ETEXT_DESC> ths, int left, int right, int top, int bottom);
typedef TessProgressFunc
    = ffi.Pointer<ffi.NativeFunction<TessProgressFuncFunction>>;

final class Boxa extends ffi.Opaque {}

final class Pixa extends ffi.Opaque {}

final class _iobuf extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _Placeholder;
}

typedef FILE = _iobuf;

const int TRUE = 1;

const int FALSE = 0;

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for libleptonica of the Tesseract OCR engine.
class LeptonicaBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LeptonicaBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LeptonicaBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// !
  /// pixRead()
  ///
  /// Input:  filename (with full pathname or in local directory)
  /// Return: pix if OK; null on error
  ffi.Pointer<PIX> pixRead(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _pixRead(
      filename,
    );
  }

  late final _pixReadPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<PIX> Function(ffi.Pointer<ffi.Char>)>>(
      'pixRead');
  late final _pixRead = _pixReadPtr
      .asFunction<ffi.Pointer<PIX> Function(ffi.Pointer<ffi.Char>)>();

  /// !
  /// pixDestroy()
  ///
  /// Input:  &pix <will be nulled>
  /// Return: void
  ///
  /// Notes:
  /// (1) Decrements the ref count and, if 0, destroys the pix.
  /// (2) Always nulls the input ptr.
  void pixDestroy(
    ffi.Pointer<ffi.Pointer<PIX>> ppix,
  ) {
    return _pixDestroy(
      ppix,
    );
  }

  late final _pixDestroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Pointer<PIX>>)>>(
      'pixDestroy');
  late final _pixDestroy =
      _pixDestroyPtr.asFunction<void Function(ffi.Pointer<ffi.Pointer<PIX>>)>();
}

final class Pix extends ffi.Opaque {}

typedef PIX = Pix;
